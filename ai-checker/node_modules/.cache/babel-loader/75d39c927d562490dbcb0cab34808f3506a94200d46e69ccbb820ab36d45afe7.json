{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prash\\\\OneDrive\\\\Desktop\\\\ai-personal-health-assistant\\\\frontend\\\\ai-checker\\\\src\\\\components\\\\SymptomChecker.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport gsap from \"gsap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SymptomChecker = () => {\n  _s();\n  const [symptoms, setSymptoms] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const containerRef = useRef(null);\n  const resultRef = useRef(null);\n  useEffect(() => {\n    gsap.from(containerRef.current, {\n      opacity: 0,\n      y: 30,\n      duration: 1,\n      ease: \"power3.out\"\n    });\n  }, []);\n  const handleCheck = async () => {\n    try {\n      const res = await axios.post(\"http://localhost:8000/predict/\", {\n        symptoms: symptoms.split(\",\")\n      });\n      setResult(res.data.predicted_disease);\n      gsap.fromTo(resultRef.current, {\n        opacity: 0,\n        y: 10\n      }, {\n        opacity: 1,\n        y: 0,\n        duration: 0.5,\n        ease: \"power2.out\"\n      });\n    } catch (err) {\n      setResult(\"An error occurred. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"p-6 max-w-xl mx-auto bg-white rounded-xl shadow-lg space-y-4 mt-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-blue-700 text-center\",\n      children: \"Symptom Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"border border-gray-300 rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\",\n      placeholder: \"e.g., fever, headache, fatigue\",\n      value: symptoms,\n      onChange: e => setSymptoms(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheck,\n      className: \"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded-lg transition\",\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(\"p\", {\n      ref: resultRef,\n      className: \"mt-4 font-medium text-green-700 bg-green-50 border border-green-300 p-3 rounded-lg\",\n      children: [\"Predicted Disease: \", result]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(SymptomChecker, \"0tHwkeercwf7yiID6mhzZT2b7Pw=\");\n_c = SymptomChecker;\nexport default SymptomChecker;\nvar _c;\n$RefreshReg$(_c, \"SymptomChecker\");","map":{"version":3,"names":["useState","useEffect","useRef","axios","gsap","jsxDEV","_jsxDEV","SymptomChecker","_s","symptoms","setSymptoms","result","setResult","containerRef","resultRef","from","current","opacity","y","duration","ease","handleCheck","res","post","split","data","predicted_disease","fromTo","err","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/prash/OneDrive/Desktop/ai-personal-health-assistant/frontend/ai-checker/src/components/SymptomChecker.jsx"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport gsap from \"gsap\";\r\n\r\nconst SymptomChecker = () => {\r\n  const [symptoms, setSymptoms] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n  const containerRef = useRef(null);\r\n  const resultRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    gsap.from(containerRef.current, {\r\n      opacity: 0,\r\n      y: 30,\r\n      duration: 1,\r\n      ease: \"power3.out\",\r\n    });\r\n  }, []);\r\n\r\n  const handleCheck = async () => {\r\n    try {\r\n      const res = await axios.post(\"http://localhost:8000/predict/\", {\r\n        symptoms: symptoms.split(\",\"),\r\n      });\r\n      setResult(res.data.predicted_disease);\r\n\r\n      gsap.fromTo(\r\n        resultRef.current,\r\n        { opacity: 0, y: 10 },\r\n        { opacity: 1, y: 0, duration: 0.5, ease: \"power2.out\" }\r\n      );\r\n    } catch (err) {\r\n      setResult(\"An error occurred. Try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"p-6 max-w-xl mx-auto bg-white rounded-xl shadow-lg space-y-4 mt-10\"\r\n    >\r\n      <h2 className=\"text-2xl font-bold text-blue-700 text-center\">Symptom Checker</h2>\r\n      <input\r\n        type=\"text\"\r\n        className=\"border border-gray-300 rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        placeholder=\"e.g., fever, headache, fatigue\"\r\n        value={symptoms}\r\n        onChange={(e) => setSymptoms(e.target.value)}\r\n      />\r\n      <button\r\n        onClick={handleCheck}\r\n        className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 rounded-lg transition\"\r\n      >\r\n        Check\r\n      </button>\r\n      {result && (\r\n        <p\r\n          ref={resultRef}\r\n          className=\"mt-4 font-medium text-green-700 bg-green-50 border border-green-300 p-3 rounded-lg\"\r\n        >\r\n          Predicted Disease: {result}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SymptomChecker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}